#!/usr/bin/env python

PACKAGE='balloon_planner'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

params = gen.add_group("Balloon planner parameters");

params.add("lurking__min_observing_duration", double_t, 1, "how long does the trajectory have to be observed before transitioning to the lurking state", 3.0, 0.0, 120.0);
params.add("lurking__min_points", int_t, 1, "how many points in minimal have to be observed before transitioning to the lurking state", 3, 0, 120);
params.add("lurking__z_offset", double_t, 1, "the lurking position will be offset relative to the ball trajectory by this value in the z direction", -1.0, -5.0, 5.0);
params.add("lurking__max_reposition", double_t, 1, "maximal adaptive reposition distance from the original lurking position", 1.0, 0.0, 5.0);

params.add("z_bounds__min", double_t, 1, "balloon detection below this height will be discarded", 1.0, 0.0, 20.0);
params.add("z_bounds__max", double_t, 1, "balloon detection above this height will be discarded", 1.0, 0.0, 20.0);

params.add("trajectory__target_offset", double_t, 1, "offset of the target position from the filtered ball position", 2.0, 0.0, 10.0);
params.add("trajectory__horizon", double_t, 1, "planning horizong (how much forward in time to plan the trajectory)", 2.0, 0.0, 20.0);

params.add("approach_speed", double_t, 1, "max. speed to approach the ball", 2.0, 0.0, 20.0);
params.add("chase_speed", double_t, 1, "speed increase (relative to ball speed) when chasing the ball", 2.0, 0.0, 20.0);

exit(gen.generate(PACKAGE, "balloon_planner", "PlanningParams"))
