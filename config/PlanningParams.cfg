#!/usr/bin/env python

PACKAGE='balloon_planner'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

params = gen.add_group("Balloon planner parameters");

params.add("z_bounds__min", double_t, 1, "balloon detection below this height will be discarded", 1.0, 0.0, 20.0);
params.add("z_bounds__max", double_t, 1, "balloon detection above this height will be discarded", 1.0, 0.0, 20.0);

params.add("trajectory__target_offset", double_t, 1, "offset of the target position from the filtered ball position", 2.0, 0.0, 10.0);
params.add("trajectory__horizon", double_t, 1, "planning horizong (how much forward in time to plan the trajectory)", 2.0, 0.0, 20.0);

params.add("approach_speed", double_t, 1, "max. speed to approach the ball", 2.0, 0.0, 20.0);
params.add("chase_speed", double_t, 1, "speed increase (relative to ball speed) when chasing the ball", 2.0, 0.0, 20.0);
params.add("catch_trigger_distance", double_t, 1, "when predictions are available and the target is closer than this distance, the catching manoeuvre will begin", 2.5, 0.0, 20.0);

params.add("pid__kP", double_t, 1, "coefficient of the proportional part of the yaw PID controller", 1.0, 0.0, 10.0);
params.add("pid__kI", double_t, 1, "coefficient of the integrational part of the yaw PID controller", 1.0, 0.0, 10.0);
params.add("pid__kD", double_t, 1, "coefficient of the derivational part of the yaw PID controller", 1.0, 0.0, 10.0);
params.add("pid__max_I", double_t, 1, "maximal value of the integrated error of the yaw PID controller (anti-windup)", 1.0, 0.0, 100.0);
params.add("pid__reset_duration", double_t, 1, "after this duration elapsed, the yaw PID controller will reset", 1.0, 0.0, 100.0);

exit(gen.generate(PACKAGE, "balloon_planner", "PlanningParams"))
